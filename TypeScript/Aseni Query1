import { spawn, Pool, Worker } from "threads"
const sql = require('mssql')//Modulo mssql
const dbSettings = { //Conficuracion de la base de datos
    user: "Jenaro",
    password: "Jenaro2000",
    server: "localhost",
    database: "Aseni",
    trustServerCertificate: true,
    pool: {
        max: 10,
        min: 1,
        idleTimeoutMillis: 30000
      }
};

const poolPromise = new sql.ConnectionPool(dbSettings)
.connect()
  .then(pool => {
    console.log('Connected to MSSQL')
    return pool
  })
  .catch(err => console.log('Database Connection Failed! Bad Config: ', err))
  
const pool = poolPromise

/*async function getConnection() {//Conectar a la base y realiza un query
    const pool = await sql.connect(dbSettings);//va generar pool una vez se conecte
    const result = await pool.request().query("SELECT C.id AS Id_Canton, C.nombre AS Canton, count(*) AS Cantidad_Entregables FROM  Canton AS C inner join Entregable AS E ON C.id = E.id_canton inner join (	SELECT count(*) AS Total_partidos FROM Partido )AS Partidos ON Partidos.Total_partidos > 0 GROUP BY C.id,C.nombre,Total_partidos HAVING Partidos.Total_partidos*0.25 >= count(DISTINCT E.id_partido)")//Para realizar consultas
    console.log(result);
    pool.close();
}*/

async function runQuery(query) {
  const pool = await poolPromise
  const result = await pool.request().query(query)//Para realizar consultas
  console.log(result)
  // sql.connect() will return the existing global pool if it exists or create a new one if it doesn't
  /*return sql.connect(dbSettings).then((pool) => {
    return pool.query(query,(err, result)=>{
      console.log(result)
    })
  })*/
}


//getConnection();
runQuery("SELECT C.id AS Id_Canton, C.nombre AS Canton, count(*) AS Cantidad_Entregables FROM  Canton AS C inner join Entregable AS E ON C.id = E.id_canton inner join (	SELECT count(*) AS Total_partidos FROM Partido )AS Partidos ON Partidos.Total_partidos > 0 GROUP BY C.id,C.nombre,Total_partidos HAVING Partidos.Total_partidos*0.25 >= count(DISTINCT E.id_partido)");
async () =>{ await sql.close()}
